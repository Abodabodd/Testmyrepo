import requests
import re
import base64
import random
import string
from urllib.parse import urlparse, parse_qs
from bs4 import BeautifulSoup

# استيراد مكتبة فك التشفير RC4
try:
    from Crypto.Cipher import ARC4
except ImportError:
    print("مكتبة pycryptodome غير مثبتة. يرجى تشغيل: pip install pycryptodome")
    exit()

# --- الثوابت المأخوذة من الكود الأصلي ---
NONCE_REGEX = re.compile(r'_xt\s*=\s*"([^"]+)"')
REQUEST_URL = "https://videa.hu/player/xml?platform=desktop"
STUPID_KEY = "xHb0ZvME5q8CBcoQi6AngerDu3FGO9fkUlwPmLVY_RTzj2hJIS4NasXWKy1td7p"

def get_random_string(length=8):
    """ينشئ سلسلة عشوائية من 8 أحرف وأرقام."""
    allowed_chars = string.ascii_lowercase + string.digits
    return ''.join(random.choices(allowed_chars, k=length))

def decrypt_xml(encrypted_data: bytes, key: str) -> str:
    """يفك تشفير بيانات XML باستخدام RC4."""
    cipher = ARC4.new(key.encode('utf-8'))
    decrypted_bytes = cipher.decrypt(encrypted_data)
    return decrypted_bytes.decode('utf-8')

def videos_from_url(url: str) -> list:
    """الدالة الرئيسية لاستخراج روابط الفيديو من رابط Videa."""
    
    # تمت إضافة try...except هنا
    try:
        print(f"[*] جاري جلب الصفحة من: {url}")
        # 1. جلب الصفحة الأولية واستخراج المفتاح المشفر (_xt)
        response = requests.get(url, timeout=10) # إضافة timeout
        response.raise_for_status()
        body = response.text
        
        match = NONCE_REGEX.search(body)
        if not match:
            print("[!] لم يتم العثور على المفتاح المشفر (_xt) في الصفحة.")
            return []
        
        nonce = match.group(1)
        print("[*] تم استخراج المفتاح المشفر بنجاح.")

        # 2. تطبيق خوارزمية فك التشفير لتوليد المعاملات
        param_l = nonce[:32]
        param_s_part = nonce[32:]
        
        result_parts = []
        for i in range(32):
            index = i - (STUPID_KEY.find(param_l[i]) - 31)
            result_parts.append(param_s_part[index])
        
        result = "".join(result_parts)
        
        # 3. توليد المعاملات ومفتاح RC4
        seed = get_random_string(8) # هذا هو _s
        param_t = result[:16]       # هذا هو _t
        rc4_key_part = result[16:]
        
        print(f"[*] تم توليد المعاملات: _s={seed}")

        # 4. بناء الرابط الثاني وطلب بيانات XML
        parsed_url = urlparse(url)
        video_id = parse_qs(parsed_url.query).get('v', [None])[0]
        if not video_id:
            print("[!] لم يتم العثور على معرّف الفيديو (v) في الرابط.")
            return []

        request_params = {
            '_s': seed,
            '_t': param_t,
            'v': video_id
        }

        headers = {
            'Referer': url,
            'Origin': 'https://videa.hu'
        }

        print(f"[*] جاري طلب بيانات الفيديو من الخادم...")
        xml_response = requests.get(REQUEST_URL, params=request_params, headers=headers, timeout=10) # إضافة timeout
        xml_response.raise_for_status()
        
        # 5. التحقق من الرد وفك تشفيره إذا لزم الأمر
        if xml_response.text.strip().startswith("<?xml"):
            soup = BeautifulSoup(xml_response.text, 'lxml-xml')
            error_tag = soup.find('error')
            if error_tag:
                print(f"[!] الخادم رد بخطأ: {error_tag.text}")
            return []
        else:
            print("[*] تم استلام الرد المشفر، جاري فك التشفير...")
            final_rc4_key = rc4_key_part + seed + xml_response.headers.get('x-videa-xs', '')
            
            b64_decoded = base64.b64decode(xml_response.text)
            decrypted_xml_string = decrypt_xml(b64_decoded, final_rc4_key)
            soup = BeautifulSoup(decrypted_xml_string, 'lxml-xml')

        # 6. استخراج روابط البث النهائية من XML
        video_list = []
        video_sources = soup.find_all("video_source")
        
        if not video_sources:
            print("[!] لم يتم العثور على أي مصادر فيديو في الرد النهائي.")
            return []

        for source in video_sources:
            name = source.get('name')
            quality = f"Videa - {name}"
            
            hash_tag = soup.find(f"hash_value_{name}")
            if not hash_tag:
                continue
            
            video_url_part = source.text
            exp = source.get('exp')
            final_url = f"https:{video_url_part}?md5={hash_tag.text}&expires={exp}"
            
            video_list.append({
                'quality': quality,
                'url': final_url,
                'headers': headers
            })
            
        return video_list

    # --- [ هذا هو الجزء المفقود الذي تم إصلاحه ] ---
    except Exception as e:
        print(f"[!!!] حدث خطأ غير متوقع: {e}")
        return [] # إرجاع قائمة فارغة عند حدوث أي خطأ


# --- جزء التشغيل الرئيسي ---
if __name__ == "__main__":
    test_url = "https://videa.hu/player?v=grlbY3myVKjRb6qZ"
    
    videos = videos_from_url(test_url)
    
    print("\n--- روابط البث المستخرجة ---")
    if videos:
        # ترتيب الروابط حسب الجودة (اختياري)
        try:
            sorted_videos = sorted(videos, key=lambda v: int(re.sub(r'\D', '', v['quality'])))
        except (ValueError, TypeError):
            sorted_videos = videos

        for video in sorted_videos:
            print(f"الجودة: {video['quality']}")
            print(f"الرابط: {video['url']}\n")
    else:
        print("فشل استخراج الروابط.")
